-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.5 from Frontend/QML/Par.y
-----------------------------------------------------------------------------

state 89 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListToplevel -> ListToplevel               (1)
	%start_pToplevel -> Toplevel                       (2)
	%start_pListArg -> ListArg                         (3)
	%start_pArg -> Arg                                 (4)
	%start_pTypedVar -> TypedVar                       (5)
	%start_pListTypedVar -> ListTypedVar               (6)
	%start_pExpr3 -> Expr3                             (7)
	%start_pExpr2 -> Expr2                             (8)
	%start_pExpr1 -> Expr1                             (9)
	%start_pExpr -> Expr                               (10)
	%start_pListExpr -> ListExpr                       (11)
	%start_pLet -> Let                                 (12)
	%start_pListLet -> ListLet                         (13)
	%start_pComplex -> Complex                         (14)
	%start_pPattern -> Pattern                         (15)
	%start_pType2 -> Type2                             (16)
	%start_pType1 -> Type1                             (17)
	%start_pType -> Type                               (18)
	Ident -> L_ident                                   (19)
	Scalar -> L_Scalar                                 (20)
	Program -> ListToplevel                            (21)
	ListToplevel ->                                    (22)
	ListToplevel -> ListToplevel Toplevel              (23)
	Toplevel -> 'def' Ident ListArg ':=' Expr 'end'    (24)
	Toplevel -> 'def' Ident ListArg '->' Type ':=' Expr 'end'   (25)
	Toplevel -> 'def' Ident ListArg ':' Type ':=' Expr 'end'   (26)
	Toplevel -> 'var' Ident ':=' Expr                  (27)
	Toplevel -> 'var' Ident ':' Type ':=' Expr         (28)
	ListArg ->                                         (29)
	ListArg -> ListArg Arg                             (30)
	Arg -> '(' ListTypedVar ')'                        (31)
	TypedVar -> Ident ':' Type                         (32)
	ListTypedVar -> TypedVar                           (33)
	ListTypedVar -> TypedVar ',' ListTypedVar          (34)
	Expr3 -> Ident                                     (35)
	Expr3 -> '~1'                                      (36)
	Expr3 -> '~0'                                      (37)
	Expr3 -> '~+'                                      (38)
	Expr3 -> '~-'                                      (39)
	Expr3 -> '~i'                                      (40)
	Expr3 -> '~j'                                      (41)
	Expr3 -> '(' ListExpr ')'                          (42)
	Expr3 -> '[' Complex ']' Expr3                     (43)
	Expr3 -> '(' Expr ')'                              (44)
	Expr2 -> Expr2 Expr3                               (45)
	Expr2 -> Expr3                                     (46)
	Expr1 -> Expr2 '+' Expr1                           (47)
	Expr1 -> 'if°' Expr 'then' Expr 'else' Expr        (48)
	Expr1 -> 'if*' Expr 'then' Expr 'else' Expr        (49)
	Expr1 -> 'if' Expr 'then' Expr 'else' Expr         (50)
	Expr1 -> 'let' '{' ListLet '}' 'in' Expr           (51)
	Expr1 -> Expr2                                     (52)
	Expr -> Expr1                                      (53)
	ListExpr ->                                        (54)
	ListExpr -> Expr                                   (55)
	ListExpr -> Expr ',' ListExpr                      (56)
	Let -> Pattern '=' Expr                            (57)
	ListLet -> Let                                     (58)
	ListLet -> Let ';' ListLet                         (59)
	Complex -> Scalar '+' Scalar 'j'                   (60)
	Complex -> Scalar                                  (61)
	Complex -> Scalar 'j'                              (62)
	Complex -> '-j'                                    (63)
	Complex -> 'j'                                     (64)
	Pattern -> Ident                                   (65)
	Pattern -> '(' Ident ',' Ident ')'                 (66)
	Type2 -> 'qubit'                                   (67)
	Type2 -> 'unit'                                    (68)
	Type2 -> '(' Type ')'                              (69)
	Type1 -> Type2 '*' Type1                           (70)
	Type1 -> Type2 '->' Type1                          (71)
	Type1 -> Type2                                     (72)
	Type -> Type1                                      (73)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'->'           { PT _ (TS _ 6) }
	'-j'           { PT _ (TS _ 7) }
	':'            { PT _ (TS _ 8) }
	':='           { PT _ (TS _ 9) }
	';'            { PT _ (TS _ 10) }
	'='            { PT _ (TS _ 11) }
	'['            { PT _ (TS _ 12) }
	']'            { PT _ (TS _ 13) }
	'def'          { PT _ (TS _ 14) }
	'else'         { PT _ (TS _ 15) }
	'end'          { PT _ (TS _ 16) }
	'if'           { PT _ (TS _ 17) }
	'if*'          { PT _ (TS _ 18) }
	'if°'          { PT _ (TS _ 19) }
	'in'           { PT _ (TS _ 20) }
	'j'            { PT _ (TS _ 21) }
	'let'          { PT _ (TS _ 22) }
	'qubit'        { PT _ (TS _ 23) }
	'then'         { PT _ (TS _ 24) }
	'unit'         { PT _ (TS _ 25) }
	'var'          { PT _ (TS _ 26) }
	'{'            { PT _ (TS _ 27) }
	'}'            { PT _ (TS _ 28) }
	'~+'           { PT _ (TS _ 29) }
	'~-'           { PT _ (TS _ 30) }
	'~0'           { PT _ (TS _ 31) }
	'~1'           { PT _ (TS _ 32) }
	'~i'           { PT _ (TS _ 33) }
	'~j'           { PT _ (TS _ 34) }
	L_ident        { PT _ (TV $$) }
	L_Scalar       { PT _ (T_Scalar $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListToplevel rule  1
	%start_pToplevel rule  2
	%start_pListArg rule  3
	%start_pArg     rule  4
	%start_pTypedVar rule  5
	%start_pListTypedVar rule  6
	%start_pExpr3   rule  7
	%start_pExpr2   rule  8
	%start_pExpr1   rule  9
	%start_pExpr    rule  10
	%start_pListExpr rule  11
	%start_pLet     rule  12
	%start_pListLet rule  13
	%start_pComplex rule  14
	%start_pPattern rule  15
	%start_pType2   rule  16
	%start_pType1   rule  17
	%start_pType    rule  18
	Ident           rule  19
	Scalar          rule  20
	Program         rule  21
	ListToplevel    rules 22, 23
	Toplevel        rules 24, 25, 26, 27, 28
	ListArg         rules 29, 30
	Arg             rule  31
	TypedVar        rule  32
	ListTypedVar    rules 33, 34
	Expr3           rules 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
	Expr2           rules 45, 46
	Expr1           rules 47, 48, 49, 50, 51, 52
	Expr            rule  53
	ListExpr        rules 54, 55, 56
	Let             rule  57
	ListLet         rules 58, 59
	Complex         rules 60, 61, 62, 63, 64
	Pattern         rules 65, 66
	Type2           rules 67, 68, 69
	Type1           rules 70, 71, 72
	Type            rule  73

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'def'          reduce using rule 22
	'var'          reduce using rule 22
	%eof           reduce using rule 22

	Program        goto state 74
	ListToplevel   goto state 75

State 1


	'def'          reduce using rule 22
	'var'          reduce using rule 22
	%eof           reduce using rule 22

	ListToplevel   goto state 73

State 2


	'def'          shift, and enter state 71
	'var'          shift, and enter state 72

	Toplevel       goto state 70

State 3


	'('            reduce using rule 29
	%eof           reduce using rule 29

	ListArg        goto state 69

State 4


	'('            shift, and enter state 68

	Arg            goto state 67

State 5


	L_ident        shift, and enter state 20

	Ident          goto state 63
	TypedVar       goto state 66

State 6


	L_ident        shift, and enter state 20

	Ident          goto state 63
	TypedVar       goto state 64
	ListTypedVar   goto state 65

State 7


	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 62

State 8


	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 61

State 9


	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 60

State 10


	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 59

State 11


	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20
	%eof           reduce using rule 54

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 45
	ListExpr       goto state 46

State 12


	'('            shift, and enter state 31
	L_ident        shift, and enter state 20

	Ident          goto state 29
	Let            goto state 40
	Pattern        goto state 39

State 13


	'('            shift, and enter state 31
	L_ident        shift, and enter state 20

	Ident          goto state 29
	Let            goto state 37
	ListLet        goto state 38
	Pattern        goto state 39

State 14


	'-j'           shift, and enter state 34
	'j'            shift, and enter state 35
	L_Scalar       shift, and enter state 36

	Scalar         goto state 32
	Complex        goto state 33

State 15


	'('            shift, and enter state 31
	L_ident        shift, and enter state 20

	Ident          goto state 29
	Pattern        goto state 30

State 16


	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 28

State 17


	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 27

State 18


	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 22
	Type           goto state 23

State 19


	L_ident        shift, and enter state 20


State 20

	Ident -> L_ident .                                  (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19
	'+'            reduce using rule 19
	','            reduce using rule 19
	'->'           reduce using rule 19
	':'            reduce using rule 19
	':='           reduce using rule 19
	';'            reduce using rule 19
	'='            reduce using rule 19
	'['            reduce using rule 19
	'def'          reduce using rule 19
	'else'         reduce using rule 19
	'end'          reduce using rule 19
	'then'         reduce using rule 19
	'var'          reduce using rule 19
	'}'            reduce using rule 19
	'~+'           reduce using rule 19
	'~-'           reduce using rule 19
	'~0'           reduce using rule 19
	'~1'           reduce using rule 19
	'~i'           reduce using rule 19
	'~j'           reduce using rule 19
	L_ident        reduce using rule 19
	%eof           reduce using rule 19


State 21

	Type1 -> Type2 . '*' Type1                          (rule 70)
	Type1 -> Type2 . '->' Type1                         (rule 71)
	Type1 -> Type2 .                                    (rule 72)

	')'            reduce using rule 72
	'*'            shift, and enter state 99
	','            reduce using rule 72
	'->'           shift, and enter state 100
	':='           reduce using rule 72
	%eof           reduce using rule 72


State 22

	Type -> Type1 .                                     (rule 73)

	')'            reduce using rule 73
	','            reduce using rule 73
	':='           reduce using rule 73
	%eof           reduce using rule 73


State 23

	%start_pType -> Type .                              (rule 18)

	%eof           accept


State 24

	Type2 -> '(' . Type ')'                             (rule 69)

	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 22
	Type           goto state 98

State 25

	Type2 -> 'qubit' .                                  (rule 67)

	')'            reduce using rule 67
	'*'            reduce using rule 67
	','            reduce using rule 67
	'->'           reduce using rule 67
	':='           reduce using rule 67
	%eof           reduce using rule 67


State 26

	Type2 -> 'unit' .                                   (rule 68)

	')'            reduce using rule 68
	'*'            reduce using rule 68
	','            reduce using rule 68
	'->'           reduce using rule 68
	':='           reduce using rule 68
	%eof           reduce using rule 68


State 27

	%start_pType1 -> Type1 .                            (rule 17)

	%eof           accept


State 28

	%start_pType2 -> Type2 .                            (rule 16)

	%eof           accept


State 29

	Pattern -> Ident .                                  (rule 65)

	'='            reduce using rule 65
	%eof           reduce using rule 65


State 30

	%start_pPattern -> Pattern .                        (rule 15)

	%eof           accept


State 31

	Pattern -> '(' . Ident ',' Ident ')'                (rule 66)

	L_ident        shift, and enter state 20

	Ident          goto state 97

State 32

	Complex -> Scalar . '+' Scalar 'j'                  (rule 60)
	Complex -> Scalar .                                 (rule 61)
	Complex -> Scalar . 'j'                             (rule 62)

	'+'            shift, and enter state 95
	']'            reduce using rule 61
	'j'            shift, and enter state 96
	%eof           reduce using rule 61


State 33

	%start_pComplex -> Complex .                        (rule 14)

	%eof           accept


State 34

	Complex -> '-j' .                                   (rule 63)

	']'            reduce using rule 63
	%eof           reduce using rule 63


State 35

	Complex -> 'j' .                                    (rule 64)

	']'            reduce using rule 64
	%eof           reduce using rule 64


State 36

	Scalar -> L_Scalar .                                (rule 20)

	'+'            reduce using rule 20
	']'            reduce using rule 20
	'j'            reduce using rule 20
	%eof           reduce using rule 20


State 37

	ListLet -> Let .                                    (rule 58)
	ListLet -> Let . ';' ListLet                        (rule 59)

	';'            shift, and enter state 94
	'}'            reduce using rule 58
	%eof           reduce using rule 58


State 38

	%start_pListLet -> ListLet .                        (rule 13)

	%eof           accept


State 39

	Let -> Pattern . '=' Expr                           (rule 57)

	'='            shift, and enter state 93


State 40

	%start_pLet -> Let .                                (rule 12)

	%eof           accept


State 41

	Expr3 -> Ident .                                    (rule 35)

	'('            reduce using rule 35
	')'            reduce using rule 35
	'+'            reduce using rule 35
	','            reduce using rule 35
	';'            reduce using rule 35
	'['            reduce using rule 35
	'def'          reduce using rule 35
	'else'         reduce using rule 35
	'end'          reduce using rule 35
	'then'         reduce using rule 35
	'var'          reduce using rule 35
	'}'            reduce using rule 35
	'~+'           reduce using rule 35
	'~-'           reduce using rule 35
	'~0'           reduce using rule 35
	'~1'           reduce using rule 35
	'~i'           reduce using rule 35
	'~j'           reduce using rule 35
	L_ident        reduce using rule 35
	%eof           reduce using rule 35


State 42

	Expr2 -> Expr3 .                                    (rule 46)

	'('            reduce using rule 46
	')'            reduce using rule 46
	'+'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	'['            reduce using rule 46
	'def'          reduce using rule 46
	'else'         reduce using rule 46
	'end'          reduce using rule 46
	'then'         reduce using rule 46
	'var'          reduce using rule 46
	'}'            reduce using rule 46
	'~+'           reduce using rule 46
	'~-'           reduce using rule 46
	'~0'           reduce using rule 46
	'~1'           reduce using rule 46
	'~i'           reduce using rule 46
	'~j'           reduce using rule 46
	L_ident        reduce using rule 46
	%eof           reduce using rule 46


State 43

	Expr2 -> Expr2 . Expr3                              (rule 45)
	Expr1 -> Expr2 . '+' Expr1                          (rule 47)
	Expr1 -> Expr2 .                                    (rule 52)

	'('            shift, and enter state 47
	')'            reduce using rule 52
	'+'            shift, and enter state 92
	','            reduce using rule 52
	';'            reduce using rule 52
	'['            shift, and enter state 48
	'def'          reduce using rule 52
	'else'         reduce using rule 52
	'end'          reduce using rule 52
	'then'         reduce using rule 52
	'var'          reduce using rule 52
	'}'            reduce using rule 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20
	%eof           reduce using rule 52

	Ident          goto state 41
	Expr3          goto state 83

State 44

	Expr -> Expr1 .                                     (rule 53)

	')'            reduce using rule 53
	','            reduce using rule 53
	';'            reduce using rule 53
	'def'          reduce using rule 53
	'else'         reduce using rule 53
	'end'          reduce using rule 53
	'then'         reduce using rule 53
	'var'          reduce using rule 53
	'}'            reduce using rule 53
	%eof           reduce using rule 53


State 45

	ListExpr -> Expr .                                  (rule 55)
	ListExpr -> Expr . ',' ListExpr                     (rule 56)

	')'            reduce using rule 55
	','            shift, and enter state 91
	%eof           reduce using rule 55


State 46

	%start_pListExpr -> ListExpr .                      (rule 11)

	%eof           accept


State 47

	Expr3 -> '(' . ListExpr ')'                         (rule 42)
	Expr3 -> '(' . Expr ')'                             (rule 44)

	'('            shift, and enter state 47
	')'            reduce using rule 54
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 89
	ListExpr       goto state 90

State 48

	Expr3 -> '[' . Complex ']' Expr3                    (rule 43)

	'-j'           shift, and enter state 34
	'j'            shift, and enter state 35
	L_Scalar       shift, and enter state 36

	Scalar         goto state 32
	Complex        goto state 88

State 49

	Expr1 -> 'if' . Expr 'then' Expr 'else' Expr        (rule 50)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 87

State 50

	Expr1 -> 'if*' . Expr 'then' Expr 'else' Expr       (rule 49)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 86

State 51

	Expr1 -> 'if°' . Expr 'then' Expr 'else' Expr       (rule 48)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 85

State 52

	Expr1 -> 'let' . '{' ListLet '}' 'in' Expr          (rule 51)

	'{'            shift, and enter state 84


State 53

	Expr3 -> '~+' .                                     (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	';'            reduce using rule 38
	'['            reduce using rule 38
	'def'          reduce using rule 38
	'else'         reduce using rule 38
	'end'          reduce using rule 38
	'then'         reduce using rule 38
	'var'          reduce using rule 38
	'}'            reduce using rule 38
	'~+'           reduce using rule 38
	'~-'           reduce using rule 38
	'~0'           reduce using rule 38
	'~1'           reduce using rule 38
	'~i'           reduce using rule 38
	'~j'           reduce using rule 38
	L_ident        reduce using rule 38
	%eof           reduce using rule 38


State 54

	Expr3 -> '~-' .                                     (rule 39)

	'('            reduce using rule 39
	')'            reduce using rule 39
	'+'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	'['            reduce using rule 39
	'def'          reduce using rule 39
	'else'         reduce using rule 39
	'end'          reduce using rule 39
	'then'         reduce using rule 39
	'var'          reduce using rule 39
	'}'            reduce using rule 39
	'~+'           reduce using rule 39
	'~-'           reduce using rule 39
	'~0'           reduce using rule 39
	'~1'           reduce using rule 39
	'~i'           reduce using rule 39
	'~j'           reduce using rule 39
	L_ident        reduce using rule 39
	%eof           reduce using rule 39


State 55

	Expr3 -> '~0' .                                     (rule 37)

	'('            reduce using rule 37
	')'            reduce using rule 37
	'+'            reduce using rule 37
	','            reduce using rule 37
	';'            reduce using rule 37
	'['            reduce using rule 37
	'def'          reduce using rule 37
	'else'         reduce using rule 37
	'end'          reduce using rule 37
	'then'         reduce using rule 37
	'var'          reduce using rule 37
	'}'            reduce using rule 37
	'~+'           reduce using rule 37
	'~-'           reduce using rule 37
	'~0'           reduce using rule 37
	'~1'           reduce using rule 37
	'~i'           reduce using rule 37
	'~j'           reduce using rule 37
	L_ident        reduce using rule 37
	%eof           reduce using rule 37


State 56

	Expr3 -> '~1' .                                     (rule 36)

	'('            reduce using rule 36
	')'            reduce using rule 36
	'+'            reduce using rule 36
	','            reduce using rule 36
	';'            reduce using rule 36
	'['            reduce using rule 36
	'def'          reduce using rule 36
	'else'         reduce using rule 36
	'end'          reduce using rule 36
	'then'         reduce using rule 36
	'var'          reduce using rule 36
	'}'            reduce using rule 36
	'~+'           reduce using rule 36
	'~-'           reduce using rule 36
	'~0'           reduce using rule 36
	'~1'           reduce using rule 36
	'~i'           reduce using rule 36
	'~j'           reduce using rule 36
	L_ident        reduce using rule 36
	%eof           reduce using rule 36


State 57

	Expr3 -> '~i' .                                     (rule 40)

	'('            reduce using rule 40
	')'            reduce using rule 40
	'+'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	'['            reduce using rule 40
	'def'          reduce using rule 40
	'else'         reduce using rule 40
	'end'          reduce using rule 40
	'then'         reduce using rule 40
	'var'          reduce using rule 40
	'}'            reduce using rule 40
	'~+'           reduce using rule 40
	'~-'           reduce using rule 40
	'~0'           reduce using rule 40
	'~1'           reduce using rule 40
	'~i'           reduce using rule 40
	'~j'           reduce using rule 40
	L_ident        reduce using rule 40
	%eof           reduce using rule 40


State 58

	Expr3 -> '~j' .                                     (rule 41)

	'('            reduce using rule 41
	')'            reduce using rule 41
	'+'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	'['            reduce using rule 41
	'def'          reduce using rule 41
	'else'         reduce using rule 41
	'end'          reduce using rule 41
	'then'         reduce using rule 41
	'var'          reduce using rule 41
	'}'            reduce using rule 41
	'~+'           reduce using rule 41
	'~-'           reduce using rule 41
	'~0'           reduce using rule 41
	'~1'           reduce using rule 41
	'~i'           reduce using rule 41
	'~j'           reduce using rule 41
	L_ident        reduce using rule 41
	%eof           reduce using rule 41


State 59

	%start_pExpr -> Expr .                              (rule 10)

	%eof           accept


State 60

	%start_pExpr1 -> Expr1 .                            (rule 9)

	%eof           accept


State 61

	%start_pExpr2 -> Expr2 .                            (rule 8)
	Expr2 -> Expr2 . Expr3                              (rule 45)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20
	%eof           accept

	Ident          goto state 41
	Expr3          goto state 83

State 62

	%start_pExpr3 -> Expr3 .                            (rule 7)

	%eof           accept


State 63

	TypedVar -> Ident . ':' Type                        (rule 32)

	':'            shift, and enter state 82


State 64

	ListTypedVar -> TypedVar .                          (rule 33)
	ListTypedVar -> TypedVar . ',' ListTypedVar         (rule 34)

	')'            reduce using rule 33
	','            shift, and enter state 81
	%eof           reduce using rule 33


State 65

	%start_pListTypedVar -> ListTypedVar .              (rule 6)

	%eof           accept


State 66

	%start_pTypedVar -> TypedVar .                      (rule 5)

	%eof           accept


State 67

	%start_pArg -> Arg .                                (rule 4)

	%eof           accept


State 68

	Arg -> '(' . ListTypedVar ')'                       (rule 31)

	L_ident        shift, and enter state 20

	Ident          goto state 63
	TypedVar       goto state 64
	ListTypedVar   goto state 80

State 69

	%start_pListArg -> ListArg .                        (rule 3)
	ListArg -> ListArg . Arg                            (rule 30)

	'('            shift, and enter state 68
	%eof           accept

	Arg            goto state 79

State 70

	%start_pToplevel -> Toplevel .                      (rule 2)

	%eof           accept


State 71

	Toplevel -> 'def' . Ident ListArg ':=' Expr 'end'    (rule 24)
	Toplevel -> 'def' . Ident ListArg '->' Type ':=' Expr 'end'    (rule 25)
	Toplevel -> 'def' . Ident ListArg ':' Type ':=' Expr 'end'    (rule 26)

	L_ident        shift, and enter state 20

	Ident          goto state 78

State 72

	Toplevel -> 'var' . Ident ':=' Expr                 (rule 27)
	Toplevel -> 'var' . Ident ':' Type ':=' Expr        (rule 28)

	L_ident        shift, and enter state 20

	Ident          goto state 77

State 73

	%start_pListToplevel -> ListToplevel .              (rule 1)
	ListToplevel -> ListToplevel . Toplevel             (rule 23)

	'def'          shift, and enter state 71
	'var'          shift, and enter state 72
	%eof           accept

	Toplevel       goto state 76

State 74

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 75

	Program -> ListToplevel .                           (rule 21)
	ListToplevel -> ListToplevel . Toplevel             (rule 23)

	'def'          shift, and enter state 71
	'var'          shift, and enter state 72
	%eof           reduce using rule 21

	Toplevel       goto state 76

State 76

	ListToplevel -> ListToplevel Toplevel .             (rule 23)

	'def'          reduce using rule 23
	'var'          reduce using rule 23
	%eof           reduce using rule 23


State 77

	Toplevel -> 'var' Ident . ':=' Expr                 (rule 27)
	Toplevel -> 'var' Ident . ':' Type ':=' Expr        (rule 28)

	':'            shift, and enter state 121
	':='           shift, and enter state 122


State 78

	Toplevel -> 'def' Ident . ListArg ':=' Expr 'end'    (rule 24)
	Toplevel -> 'def' Ident . ListArg '->' Type ':=' Expr 'end'    (rule 25)
	Toplevel -> 'def' Ident . ListArg ':' Type ':=' Expr 'end'    (rule 26)

	'('            reduce using rule 29
	'->'           reduce using rule 29
	':'            reduce using rule 29
	':='           reduce using rule 29

	ListArg        goto state 120

State 79

	ListArg -> ListArg Arg .                            (rule 30)

	'('            reduce using rule 30
	'->'           reduce using rule 30
	':'            reduce using rule 30
	':='           reduce using rule 30
	%eof           reduce using rule 30


State 80

	Arg -> '(' ListTypedVar . ')'                       (rule 31)

	')'            shift, and enter state 119


State 81

	ListTypedVar -> TypedVar ',' . ListTypedVar         (rule 34)

	L_ident        shift, and enter state 20

	Ident          goto state 63
	TypedVar       goto state 64
	ListTypedVar   goto state 118

State 82

	TypedVar -> Ident ':' . Type                        (rule 32)

	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 22
	Type           goto state 117

State 83

	Expr2 -> Expr2 Expr3 .                              (rule 45)

	'('            reduce using rule 45
	')'            reduce using rule 45
	'+'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	'['            reduce using rule 45
	'def'          reduce using rule 45
	'else'         reduce using rule 45
	'end'          reduce using rule 45
	'then'         reduce using rule 45
	'var'          reduce using rule 45
	'}'            reduce using rule 45
	'~+'           reduce using rule 45
	'~-'           reduce using rule 45
	'~0'           reduce using rule 45
	'~1'           reduce using rule 45
	'~i'           reduce using rule 45
	'~j'           reduce using rule 45
	L_ident        reduce using rule 45
	%eof           reduce using rule 45


State 84

	Expr1 -> 'let' '{' . ListLet '}' 'in' Expr          (rule 51)

	'('            shift, and enter state 31
	L_ident        shift, and enter state 20

	Ident          goto state 29
	Let            goto state 37
	ListLet        goto state 116
	Pattern        goto state 39

State 85

	Expr1 -> 'if°' Expr . 'then' Expr 'else' Expr       (rule 48)

	'then'         shift, and enter state 115


State 86

	Expr1 -> 'if*' Expr . 'then' Expr 'else' Expr       (rule 49)

	'then'         shift, and enter state 114


State 87

	Expr1 -> 'if' Expr . 'then' Expr 'else' Expr        (rule 50)

	'then'         shift, and enter state 113


State 88

	Expr3 -> '[' Complex . ']' Expr3                    (rule 43)

	']'            shift, and enter state 112


State 89

	Expr3 -> '(' Expr . ')'                             (rule 44)
	ListExpr -> Expr .                                  (rule 55)
	ListExpr -> Expr . ',' ListExpr                     (rule 56)

	')'            shift, and enter state 111
			(reduce using rule 55)

	','            shift, and enter state 91


State 90

	Expr3 -> '(' ListExpr . ')'                         (rule 42)

	')'            shift, and enter state 110


State 91

	ListExpr -> Expr ',' . ListExpr                     (rule 56)

	'('            shift, and enter state 47
	')'            reduce using rule 54
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20
	%eof           reduce using rule 54

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 45
	ListExpr       goto state 109

State 92

	Expr1 -> Expr2 '+' . Expr1                          (rule 47)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 108

State 93

	Let -> Pattern '=' . Expr                           (rule 57)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 107

State 94

	ListLet -> Let ';' . ListLet                        (rule 59)

	'('            shift, and enter state 31
	L_ident        shift, and enter state 20

	Ident          goto state 29
	Let            goto state 37
	ListLet        goto state 106
	Pattern        goto state 39

State 95

	Complex -> Scalar '+' . Scalar 'j'                  (rule 60)

	L_Scalar       shift, and enter state 36

	Scalar         goto state 105

State 96

	Complex -> Scalar 'j' .                             (rule 62)

	']'            reduce using rule 62
	%eof           reduce using rule 62


State 97

	Pattern -> '(' Ident . ',' Ident ')'                (rule 66)

	','            shift, and enter state 104


State 98

	Type2 -> '(' Type . ')'                             (rule 69)

	')'            shift, and enter state 103


State 99

	Type1 -> Type2 '*' . Type1                          (rule 70)

	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 102

State 100

	Type1 -> Type2 '->' . Type1                         (rule 71)

	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 101

State 101

	Type1 -> Type2 '->' Type1 .                         (rule 71)

	')'            reduce using rule 71
	','            reduce using rule 71
	':='           reduce using rule 71
	%eof           reduce using rule 71


State 102

	Type1 -> Type2 '*' Type1 .                          (rule 70)

	')'            reduce using rule 70
	','            reduce using rule 70
	':='           reduce using rule 70
	%eof           reduce using rule 70


State 103

	Type2 -> '(' Type ')' .                             (rule 69)

	')'            reduce using rule 69
	'*'            reduce using rule 69
	','            reduce using rule 69
	'->'           reduce using rule 69
	':='           reduce using rule 69
	%eof           reduce using rule 69


State 104

	Pattern -> '(' Ident ',' . Ident ')'                (rule 66)

	L_ident        shift, and enter state 20

	Ident          goto state 134

State 105

	Complex -> Scalar '+' Scalar . 'j'                  (rule 60)

	'j'            shift, and enter state 133


State 106

	ListLet -> Let ';' ListLet .                        (rule 59)

	'}'            reduce using rule 59
	%eof           reduce using rule 59


State 107

	Let -> Pattern '=' Expr .                           (rule 57)

	';'            reduce using rule 57
	'}'            reduce using rule 57
	%eof           reduce using rule 57


State 108

	Expr1 -> Expr2 '+' Expr1 .                          (rule 47)

	')'            reduce using rule 47
	','            reduce using rule 47
	';'            reduce using rule 47
	'def'          reduce using rule 47
	'else'         reduce using rule 47
	'end'          reduce using rule 47
	'then'         reduce using rule 47
	'var'          reduce using rule 47
	'}'            reduce using rule 47
	%eof           reduce using rule 47


State 109

	ListExpr -> Expr ',' ListExpr .                     (rule 56)

	')'            reduce using rule 56
	%eof           reduce using rule 56


State 110

	Expr3 -> '(' ListExpr ')' .                         (rule 42)

	'('            reduce using rule 42
	')'            reduce using rule 42
	'+'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	'['            reduce using rule 42
	'def'          reduce using rule 42
	'else'         reduce using rule 42
	'end'          reduce using rule 42
	'then'         reduce using rule 42
	'var'          reduce using rule 42
	'}'            reduce using rule 42
	'~+'           reduce using rule 42
	'~-'           reduce using rule 42
	'~0'           reduce using rule 42
	'~1'           reduce using rule 42
	'~i'           reduce using rule 42
	'~j'           reduce using rule 42
	L_ident        reduce using rule 42
	%eof           reduce using rule 42


State 111

	Expr3 -> '(' Expr ')' .                             (rule 44)

	'('            reduce using rule 44
	')'            reduce using rule 44
	'+'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	'['            reduce using rule 44
	'def'          reduce using rule 44
	'else'         reduce using rule 44
	'end'          reduce using rule 44
	'then'         reduce using rule 44
	'var'          reduce using rule 44
	'}'            reduce using rule 44
	'~+'           reduce using rule 44
	'~-'           reduce using rule 44
	'~0'           reduce using rule 44
	'~1'           reduce using rule 44
	'~i'           reduce using rule 44
	'~j'           reduce using rule 44
	L_ident        reduce using rule 44
	%eof           reduce using rule 44


State 112

	Expr3 -> '[' Complex ']' . Expr3                    (rule 43)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 132

State 113

	Expr1 -> 'if' Expr 'then' . Expr 'else' Expr        (rule 50)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 131

State 114

	Expr1 -> 'if*' Expr 'then' . Expr 'else' Expr       (rule 49)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 130

State 115

	Expr1 -> 'if°' Expr 'then' . Expr 'else' Expr       (rule 48)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 129

State 116

	Expr1 -> 'let' '{' ListLet . '}' 'in' Expr          (rule 51)

	'}'            shift, and enter state 128


State 117

	TypedVar -> Ident ':' Type .                        (rule 32)

	')'            reduce using rule 32
	','            reduce using rule 32
	%eof           reduce using rule 32


State 118

	ListTypedVar -> TypedVar ',' ListTypedVar .         (rule 34)

	')'            reduce using rule 34
	%eof           reduce using rule 34


State 119

	Arg -> '(' ListTypedVar ')' .                       (rule 31)

	'('            reduce using rule 31
	'->'           reduce using rule 31
	':'            reduce using rule 31
	':='           reduce using rule 31
	%eof           reduce using rule 31


State 120

	Toplevel -> 'def' Ident ListArg . ':=' Expr 'end'    (rule 24)
	Toplevel -> 'def' Ident ListArg . '->' Type ':=' Expr 'end'    (rule 25)
	Toplevel -> 'def' Ident ListArg . ':' Type ':=' Expr 'end'    (rule 26)
	ListArg -> ListArg . Arg                            (rule 30)

	'('            shift, and enter state 68
	'->'           shift, and enter state 125
	':'            shift, and enter state 126
	':='           shift, and enter state 127

	Arg            goto state 79

State 121

	Toplevel -> 'var' Ident ':' . Type ':=' Expr        (rule 28)

	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 22
	Type           goto state 124

State 122

	Toplevel -> 'var' Ident ':=' . Expr                 (rule 27)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 123

State 123

	Toplevel -> 'var' Ident ':=' Expr .                 (rule 27)

	'def'          reduce using rule 27
	'var'          reduce using rule 27
	%eof           reduce using rule 27


State 124

	Toplevel -> 'var' Ident ':' Type . ':=' Expr        (rule 28)

	':='           shift, and enter state 143


State 125

	Toplevel -> 'def' Ident ListArg '->' . Type ':=' Expr 'end'    (rule 25)

	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 22
	Type           goto state 142

State 126

	Toplevel -> 'def' Ident ListArg ':' . Type ':=' Expr 'end'    (rule 26)

	'('            shift, and enter state 24
	'qubit'        shift, and enter state 25
	'unit'         shift, and enter state 26

	Type2          goto state 21
	Type1          goto state 22
	Type           goto state 141

State 127

	Toplevel -> 'def' Ident ListArg ':=' . Expr 'end'    (rule 24)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 140

State 128

	Expr1 -> 'let' '{' ListLet '}' . 'in' Expr          (rule 51)

	'in'           shift, and enter state 139


State 129

	Expr1 -> 'if°' Expr 'then' Expr . 'else' Expr       (rule 48)

	'else'         shift, and enter state 138


State 130

	Expr1 -> 'if*' Expr 'then' Expr . 'else' Expr       (rule 49)

	'else'         shift, and enter state 137


State 131

	Expr1 -> 'if' Expr 'then' Expr . 'else' Expr        (rule 50)

	'else'         shift, and enter state 136


State 132

	Expr3 -> '[' Complex ']' Expr3 .                    (rule 43)

	'('            reduce using rule 43
	')'            reduce using rule 43
	'+'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'['            reduce using rule 43
	'def'          reduce using rule 43
	'else'         reduce using rule 43
	'end'          reduce using rule 43
	'then'         reduce using rule 43
	'var'          reduce using rule 43
	'}'            reduce using rule 43
	'~+'           reduce using rule 43
	'~-'           reduce using rule 43
	'~0'           reduce using rule 43
	'~1'           reduce using rule 43
	'~i'           reduce using rule 43
	'~j'           reduce using rule 43
	L_ident        reduce using rule 43
	%eof           reduce using rule 43


State 133

	Complex -> Scalar '+' Scalar 'j' .                  (rule 60)

	']'            reduce using rule 60
	%eof           reduce using rule 60


State 134

	Pattern -> '(' Ident ',' Ident . ')'                (rule 66)

	')'            shift, and enter state 135


State 135

	Pattern -> '(' Ident ',' Ident ')' .                (rule 66)

	'='            reduce using rule 66
	%eof           reduce using rule 66


State 136

	Expr1 -> 'if' Expr 'then' Expr 'else' . Expr        (rule 50)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 151

State 137

	Expr1 -> 'if*' Expr 'then' Expr 'else' . Expr       (rule 49)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 150

State 138

	Expr1 -> 'if°' Expr 'then' Expr 'else' . Expr       (rule 48)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 149

State 139

	Expr1 -> 'let' '{' ListLet '}' 'in' . Expr          (rule 51)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 148

State 140

	Toplevel -> 'def' Ident ListArg ':=' Expr . 'end'    (rule 24)

	'end'          shift, and enter state 147


State 141

	Toplevel -> 'def' Ident ListArg ':' Type . ':=' Expr 'end'    (rule 26)

	':='           shift, and enter state 146


State 142

	Toplevel -> 'def' Ident ListArg '->' Type . ':=' Expr 'end'    (rule 25)

	':='           shift, and enter state 145


State 143

	Toplevel -> 'var' Ident ':' Type ':=' . Expr        (rule 28)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 144

State 144

	Toplevel -> 'var' Ident ':' Type ':=' Expr .        (rule 28)

	'def'          reduce using rule 28
	'var'          reduce using rule 28
	%eof           reduce using rule 28


State 145

	Toplevel -> 'def' Ident ListArg '->' Type ':=' . Expr 'end'    (rule 25)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 153

State 146

	Toplevel -> 'def' Ident ListArg ':' Type ':=' . Expr 'end'    (rule 26)

	'('            shift, and enter state 47
	'['            shift, and enter state 48
	'if'           shift, and enter state 49
	'if*'          shift, and enter state 50
	'if°'          shift, and enter state 51
	'let'          shift, and enter state 52
	'~+'           shift, and enter state 53
	'~-'           shift, and enter state 54
	'~0'           shift, and enter state 55
	'~1'           shift, and enter state 56
	'~i'           shift, and enter state 57
	'~j'           shift, and enter state 58
	L_ident        shift, and enter state 20

	Ident          goto state 41
	Expr3          goto state 42
	Expr2          goto state 43
	Expr1          goto state 44
	Expr           goto state 152

State 147

	Toplevel -> 'def' Ident ListArg ':=' Expr 'end' .    (rule 24)

	'def'          reduce using rule 24
	'var'          reduce using rule 24
	%eof           reduce using rule 24


State 148

	Expr1 -> 'let' '{' ListLet '}' 'in' Expr .          (rule 51)

	')'            reduce using rule 51
	','            reduce using rule 51
	';'            reduce using rule 51
	'def'          reduce using rule 51
	'else'         reduce using rule 51
	'end'          reduce using rule 51
	'then'         reduce using rule 51
	'var'          reduce using rule 51
	'}'            reduce using rule 51
	%eof           reduce using rule 51


State 149

	Expr1 -> 'if°' Expr 'then' Expr 'else' Expr .       (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	'def'          reduce using rule 48
	'else'         reduce using rule 48
	'end'          reduce using rule 48
	'then'         reduce using rule 48
	'var'          reduce using rule 48
	'}'            reduce using rule 48
	%eof           reduce using rule 48


State 150

	Expr1 -> 'if*' Expr 'then' Expr 'else' Expr .       (rule 49)

	')'            reduce using rule 49
	','            reduce using rule 49
	';'            reduce using rule 49
	'def'          reduce using rule 49
	'else'         reduce using rule 49
	'end'          reduce using rule 49
	'then'         reduce using rule 49
	'var'          reduce using rule 49
	'}'            reduce using rule 49
	%eof           reduce using rule 49


State 151

	Expr1 -> 'if' Expr 'then' Expr 'else' Expr .        (rule 50)

	')'            reduce using rule 50
	','            reduce using rule 50
	';'            reduce using rule 50
	'def'          reduce using rule 50
	'else'         reduce using rule 50
	'end'          reduce using rule 50
	'then'         reduce using rule 50
	'var'          reduce using rule 50
	'}'            reduce using rule 50
	%eof           reduce using rule 50


State 152

	Toplevel -> 'def' Ident ListArg ':' Type ':=' Expr . 'end'    (rule 26)

	'end'          shift, and enter state 155


State 153

	Toplevel -> 'def' Ident ListArg '->' Type ':=' Expr . 'end'    (rule 25)

	'end'          shift, and enter state 154


State 154

	Toplevel -> 'def' Ident ListArg '->' Type ':=' Expr 'end' .    (rule 25)

	'def'          reduce using rule 25
	'var'          reduce using rule 25
	%eof           reduce using rule 25


State 155

	Toplevel -> 'def' Ident ListArg ':' Type ':=' Expr 'end' .    (rule 26)

	'def'          reduce using rule 26
	'var'          reduce using rule 26
	%eof           reduce using rule 26


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 74
Number of terminals: 36
Number of non-terminals: 40
Number of states: 156
