-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Frontend.QML.Abs where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

newtype Scalar = Scalar String
  deriving (Eq, Ord, Show, Read)

data Program = Progr [Toplevel]
  deriving (Eq, Ord, Show, Read)

data Toplevel
    = ToplF Ident [Arg] Expr | ToplFT Ident [Arg] Type Expr
  deriving (Eq, Ord, Show, Read)

data Arg = ArgTup [TypedVar]
  deriving (Eq, Ord, Show, Read)

data TypedVar = TVar Ident Type
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Ident
    | ETrue
    | EFalse
    | ETup [Expr]
    | EMul Complex Expr
    | EApp Expr Expr
    | EPlus Expr Expr
    | EIfq Expr Expr Expr
    | EIf Expr Expr Expr
    | ELet [Let] Expr
  deriving (Eq, Ord, Show, Read)

data Let = LLet Pattern Expr
  deriving (Eq, Ord, Show, Read)

data Complex = CComp Scalar Scalar
  deriving (Eq, Ord, Show, Read)

data Pattern = PVar Ident | PTup Ident Ident
  deriving (Eq, Ord, Show, Read)

data Type = TQubit | TUnit | TTens Type Type
  deriving (Eq, Ord, Show, Read)

